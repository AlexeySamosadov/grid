export declare const HARDCODED_DECLARTION_BLOCK = "\nconst wallets = useMemo(() => {\n  if (typeof window === 'undefined') {\n    return [];\n  }\n\n  const { UnsafeBurnerWalletAdapter: _, WalletConnectWalletAdapter, ...allwalletAdapters } = AllWalletAdapters;\n\n  const walletAdapters = Object.keys(allwalletAdapters)\n    .filter((key) => key.includes('Adapter'))\n    .map((key) => (allwalletAdapters as any)[key])\n    .map((WalletAdapter: any) => new WalletAdapter()); // Intentional any, TS were being annoying\n\n  const walletConnectWalletAdapter: WalletAdapterWithMutableSupportedTransactionVersions<BaseSignerWalletAdapter> | null =\n    (() => {\n      const adapter: WalletAdapterWithMutableSupportedTransactionVersions<BaseSignerWalletAdapter> =\n        new WalletConnectWalletAdapter({\n          network: WalletAdapterNetwork.Mainnet,\n          options: {\n            relayUrl: 'wss://relay.walletconnect.com',\n            projectId: metadata.walletConnectProjectId,\n            metadata: {\n              name: metadata.name,\n              description: metadata.description,\n              url: metadata.url,\n              icons: metadata.iconUrls,\n            },\n          },\n        });\n\n      // While sometimes supported, it mostly isn't. Should this be dynamic in the wallet-adapter instead?\n      adapter.supportedTransactionVersions = new Set(['legacy']);\n      return adapter;\n    })();\n\n  return [...walletAdapters, walletConnectWalletAdapter].filter((item) => item && item.name && item.icon);\n}, [metadata]);\n";
export declare const HARDCODED_WALLET_CODEBLOCK = "\nwallets={wallets}\n";
