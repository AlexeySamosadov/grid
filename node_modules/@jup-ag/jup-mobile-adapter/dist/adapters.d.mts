import { createAppKit } from '@reown/appkit/react';
import { Provider } from '@reown/appkit-adapter-solana/react';
import { BaseMessageSignerWalletAdapter, WalletName, WalletReadyState, SendTransactionOptions } from '@solana/wallet-adapter-base';
import { TransactionVersion, PublicKey, Transaction, VersionedTransaction, Connection, TransactionSignature } from '@solana/web3.js';

interface CustomReownAdapterConfig {
    open: () => Promise<PublicKey | undefined>;
    close: () => void;
    disconnectInternal: () => Promise<void>;
}
declare class CustomReownAdapter extends BaseMessageSignerWalletAdapter {
    name: WalletName<"Reown">;
    url: string;
    icon: string;
    supportedTransactionVersions: Set<TransactionVersion>;
    private _connecting;
    private _wallet;
    private _publicKey;
    private _readyState;
    private _config;
    static walletProvider: Provider | null;
    constructor(config: CustomReownAdapterConfig);
    static setWalletProvider(walletProvider: Provider | null): void;
    get publicKey(): PublicKey | null;
    get connecting(): boolean;
    get readyState(): WalletReadyState;
    autoConnect(): Promise<void>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    sendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, connection: Connection, options?: SendTransactionOptions): Promise<TransactionSignature>;
    signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<T>;
    signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<T[]>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
    private _disconnected;
    private _accountChanged;
}

type InitReownAppKitOptions = Omit<Parameters<typeof createAppKit>[0], "adapters" | "networks"> & {
    adapters?: Parameters<typeof createAppKit>[0]["adapters"];
    networks?: Parameters<typeof createAppKit>[0]["networks"];
};
declare const useWrappedReownAdapter: ({ appKitOptions, }: {
    appKitOptions: InitReownAppKitOptions;
}) => {
    reownAdapter: CustomReownAdapter;
    jupiterAdapter: CustomReownAdapter;
};

export { useWrappedReownAdapter };
