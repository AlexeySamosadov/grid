import { useCallback, useEffect, useState } from 'react';
import { useSnapshot } from 'valtio';
import { ChainController, ConnectorController, ConnectorControllerUtil, ModalController, RouterController } from '@reown/appkit-controllers';
import { ApiController } from '../src/controllers/ApiController.js';
import { WalletButtonController } from '../src/controllers/WalletButtonController.js';
import { ConstantsUtil } from '../src/utils/ConstantsUtil.js';
import { WalletUtil } from '../src/utils/WalletUtil.js';
export * from './index.js';
export function useAppKitWallet(parameters) {
    const { connectors } = useSnapshot(ConnectorController.state);
    const { pending: isWalletButtonConnecting, ready: isWalletButtonReady, error: walletButtonError, data: walletButtonData } = useSnapshot(WalletButtonController.state);
    const { onSuccess, onError } = parameters ?? {};
    useEffect(() => {
        if (!isWalletButtonReady) {
            ApiController.fetchWalletButtons().then(() => {
                if (ApiController.state.walletButtons.length) {
                    WalletButtonController.setReady(true);
                }
            });
        }
    }, [isWalletButtonReady]);
    useEffect(() => ChainController.subscribeKey('activeCaipAddress', val => {
        if (val) {
            WalletButtonController.setError(undefined);
            WalletButtonController.setPending(false);
        }
    }), []);
    useEffect(() => ApiController.subscribeKey('walletButtons', val => {
        if (val.length) {
            WalletButtonController.setReady(true);
        }
    }), []);
    const handleSuccess = useCallback((caipAddress) => {
        WalletButtonController.setData(caipAddress);
        onSuccess?.(caipAddress);
    }, [onSuccess]);
    const handleError = useCallback((err) => {
        const finalError = err instanceof Error ? err : new Error('Something went wrong');
        WalletButtonController.setError(finalError);
        onError?.(finalError);
    }, [onError]);
    const connect = useCallback(async (wallet) => {
        try {
            WalletButtonController.setPending(true);
            WalletButtonController.setError(undefined);
            if (wallet === ConstantsUtil.Email) {
                await ConnectorControllerUtil.connectEmail({
                    onOpen() {
                        ModalController.open().then(() => RouterController.push('EmailLogin'));
                    }
                }).then(handleSuccess);
                return;
            }
            if (ConstantsUtil.Socials.some(social => social === wallet)) {
                await ConnectorControllerUtil.connectSocial({
                    social: wallet,
                    onOpenFarcaster() {
                        ModalController.open({ view: 'ConnectingFarcaster' });
                    },
                    onConnect() {
                        RouterController.push('Connect');
                    }
                }).then(handleSuccess);
                return;
            }
            const walletButton = WalletUtil.getWalletButton(wallet);
            const connector = walletButton
                ? ConnectorController.getConnector(walletButton.id, walletButton.rdns)
                : undefined;
            if (connector) {
                await ConnectorControllerUtil.connectExternal(connector).then(handleSuccess);
                return;
            }
            await ConnectorControllerUtil.connectWalletConnect({
                walletConnect: wallet === 'walletConnect',
                connector: connectors.find(c => c.id === 'walletConnect'),
                onOpen(isMobile) {
                    ModalController.open().then(() => {
                        if (isMobile) {
                            RouterController.replace('AllWallets');
                        }
                        else {
                            RouterController.replace('ConnectingWalletConnect', {
                                wallet: walletButton
                            });
                        }
                    });
                },
                onConnect() {
                    RouterController.replace('Connect');
                }
            }).then(handleSuccess);
        }
        catch (err) {
            handleError(err);
        }
        finally {
            WalletButtonController.setPending(false);
        }
    }, [connectors, handleSuccess, handleError]);
    return {
        data: walletButtonData,
        error: walletButtonError,
        isReady: isWalletButtonReady,
        isPending: isWalletButtonConnecting,
        isError: Boolean(walletButtonError),
        isSuccess: Boolean(walletButtonData),
        connect
    };
}
export function useAppKitUpdateEmail(parameters) {
    const { onSuccess, onError } = parameters ?? {};
    const [data, setData] = useState();
    const [error, setError] = useState();
    const [isPending, setIsPending] = useState(false);
    const updateEmail = useCallback(async () => {
        setIsPending(true);
        setError(undefined);
        await ConnectorControllerUtil.updateEmail()
            .then(emailData => {
            setData(emailData);
            onSuccess?.(emailData);
        })
            .catch(err => {
            setError(err);
            onError?.(err);
        })
            .finally(() => setIsPending(false));
    }, [onError, onSuccess]);
    return {
        data,
        error,
        isPending,
        isError: Boolean(error),
        isSuccess: Boolean(data),
        updateEmail
    };
}
//# sourceMappingURL=react.js.map