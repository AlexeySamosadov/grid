var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html } from 'lit';
import { property, state } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { AssetUtil, ChainController, ConnectorController, ConnectorControllerUtil, ModalController, RouterController } from '@reown/appkit-controllers';
import { customElement } from '@reown/appkit-ui';
import '@reown/appkit-ui/wui-wallet-button';
import { ApiController } from '../../controllers/ApiController.js';
import { ConstantsUtil } from '../../utils/ConstantsUtil.js';
import { WalletUtil } from '../../utils/WalletUtil.js';
let AppKitWalletButton = class AppKitWalletButton extends LitElement {
    constructor() {
        super();
        this.unsubscribe = [];
        this.wallet = 'metamask';
        this.connectors = ConnectorController.state.connectors;
        this.caipAddress = ChainController.state.activeCaipAddress;
        this.loading = false;
        this.error = false;
        this.ready = WalletUtil.isWalletButtonReady(this.wallet);
        this.modalLoading = ModalController.state.loading;
        this.unsubscribe.push(...[
            ModalController.subscribeKey('loading', val => (this.modalLoading = val)),
            ConnectorController.subscribeKey('connectors', val => (this.connectors = val)),
            ChainController.subscribeKey('activeCaipAddress', val => {
                if (val) {
                    this.error = false;
                }
                this.caipAddress = val;
            }),
            ApiController.subscribeKey('walletButtons', () => {
                this.ready = WalletUtil.isWalletButtonReady(this.wallet);
            })
        ]);
    }
    disconnectedCallback() {
        this.unsubscribe.forEach(unsubscribe => unsubscribe());
    }
    firstUpdated() {
        if (!WalletUtil.isWalletButtonReady(this.wallet)) {
            ApiController.fetchWalletButtons();
        }
    }
    render() {
        if (this.wallet === 'email') {
            return this.emailTemplate();
        }
        if (ConstantsUtil.Socials.some(social => social === this.wallet)) {
            return this.socialTemplate();
        }
        const walletButton = WalletUtil.getWalletButton(this.wallet);
        const connector = walletButton
            ? ConnectorController.getConnector(walletButton.id, walletButton.rdns)
            : undefined;
        if (connector) {
            return this.externalTemplate(connector);
        }
        return this.walletButtonTemplate();
    }
    walletButtonTemplate() {
        const walletConnect = this.wallet === 'walletConnect';
        const loading = walletConnect ? this.loading : this.loading || !this.ready;
        const walletButton = WalletUtil.getWalletButton(this.wallet);
        const walletImage = AssetUtil.getWalletImageById(walletButton?.image_id);
        const walletName = this.wallet === 'walletConnect' ? 'WalletConnect' : walletButton?.name;
        return html `
      <wui-wallet-button
        data-testid="apkt-wallet-button"
        name=${(!this.ready && !walletConnect) || this.modalLoading
            ? 'Loading...'
            : ifDefined(walletName)}
        @click=${async () => {
            this.loading = true;
            await ConnectorControllerUtil.connectWalletConnect({
                walletConnect: this.wallet === 'walletConnect',
                connector: this.connectors.find(c => c.id === 'walletConnect'),
                onOpen(isMobile) {
                    ModalController.open().then(() => {
                        if (isMobile) {
                            RouterController.replace('AllWallets');
                        }
                        else {
                            RouterController.replace('ConnectingWalletConnect', {
                                wallet: walletButton
                            });
                        }
                    });
                },
                onConnect() {
                    RouterController.replace('Connect');
                }
            })
                .catch(() => {
            })
                .finally(() => (this.loading = false));
        }}
        .icon=${ifDefined(this.wallet === 'walletConnect' ? 'walletConnect' : undefined)}
        .imageSrc=${ifDefined(walletImage)}
        ?disabled=${Boolean(this.caipAddress) || loading || this.modalLoading}
        ?loading=${loading || this.modalLoading}
      ></wui-wallet-button>
    `;
    }
    externalTemplate(connector) {
        const walletButton = WalletUtil.getWalletButton(this.wallet);
        const walletImage = AssetUtil.getWalletImageById(walletButton?.image_id);
        const connectorImage = AssetUtil.getConnectorImage(connector);
        return html `
      <wui-wallet-button
        data-testid="apkt-wallet-button-external"
        name=${this.modalLoading ? 'Loading...' : ifDefined(connector.name)}
        @click=${async () => {
            this.loading = true;
            this.error = false;
            await ConnectorControllerUtil.connectExternal(connector)
                .catch(() => (this.error = true))
                .finally(() => (this.loading = false));
        }}
        .imageSrc=${ifDefined(walletImage ?? connectorImage)}
        ?disabled=${Boolean(this.caipAddress) || this.loading || this.modalLoading}
        ?loading=${this.loading || this.modalLoading}
        ?error=${this.error}
      ></wui-wallet-button>
    `;
    }
    socialTemplate() {
        return html `<wui-wallet-button
      data-testid="apkt-wallet-button-social"
      name=${this.modalLoading ? 'Loading...' : this.wallet}
      @click=${async () => {
            this.loading = true;
            this.error = false;
            return ConnectorControllerUtil.connectSocial({
                social: this.wallet,
                onOpenFarcaster() {
                    ModalController.open({ view: 'ConnectingFarcaster' });
                },
                onConnect() {
                    RouterController.push('Connect');
                }
            })
                .catch(() => (this.error = true))
                .finally(() => (this.loading = false));
        }}
      .icon=${this.wallet}
      ?disabled=${Boolean(this.caipAddress) || this.loading || this.modalLoading}
      ?loading=${this.loading || this.modalLoading}
      ?error=${this.error}
    ></wui-wallet-button>`;
    }
    emailTemplate() {
        return html `<wui-wallet-button
      data-testid="apkt-wallet-button-email"
      name=${this.modalLoading ? 'Loading...' : 'Email'}
      @click=${async () => {
            this.loading = true;
            this.error = false;
            await ConnectorControllerUtil.connectEmail({
                onOpen() {
                    ModalController.open().then(() => RouterController.push('EmailLogin'));
                },
                onConnect() {
                    RouterController.push('Connect');
                }
            })
                .catch(() => (this.error = true))
                .finally(() => (this.loading = false));
        }}
      .icon=${'mail'}
      .iconSize=${'lg'}
      ?disabled=${Boolean(this.caipAddress) || this.loading || this.modalLoading}
      ?loading=${this.loading || this.modalLoading}
      ?error=${this.error}
    ></wui-wallet-button>`;
    }
};
__decorate([
    property()
], AppKitWalletButton.prototype, "wallet", void 0);
__decorate([
    state()
], AppKitWalletButton.prototype, "connectors", void 0);
__decorate([
    state()
], AppKitWalletButton.prototype, "caipAddress", void 0);
__decorate([
    state()
], AppKitWalletButton.prototype, "loading", void 0);
__decorate([
    state()
], AppKitWalletButton.prototype, "error", void 0);
__decorate([
    state()
], AppKitWalletButton.prototype, "ready", void 0);
__decorate([
    state()
], AppKitWalletButton.prototype, "modalLoading", void 0);
AppKitWalletButton = __decorate([
    customElement('appkit-wallet-button')
], AppKitWalletButton);
export { AppKitWalletButton };
//# sourceMappingURL=index.js.map