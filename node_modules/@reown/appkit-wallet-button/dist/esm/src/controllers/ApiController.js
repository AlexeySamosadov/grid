import { proxy } from 'valtio/vanilla';
import { subscribeKey as subKey } from 'valtio/vanilla/utils';
import { ApiController as CoreApiController, CoreHelperUtil, FetchUtil } from '@reown/appkit-controllers';
import { ConstantsUtil } from '../utils/ConstantsUtil.js';
const baseUrl = CoreHelperUtil.getApiUrl();
export const api = new FetchUtil({
    baseUrl,
    clientId: null
});
const state = proxy({
    walletButtons: [],
    fetching: false
});
export const ApiController = {
    state,
    subscribeKey(key, callback) {
        return subKey(state, key, callback);
    },
    async fetchWalletButtons() {
        if (state.fetching) {
            return;
        }
        state.fetching = true;
        const walletButtonIds = Object.values(ConstantsUtil.WalletButtonsIds);
        const { data } = await api.get({
            path: '/getWallets',
            params: {
                ...CoreApiController._getSdkProperties(),
                page: '1',
                entries: String(walletButtonIds.length),
                include: walletButtonIds?.join(',')
            }
        });
        const images = data.map(d => d.image_id).filter(Boolean);
        await Promise.allSettled(images.map(id => CoreApiController._fetchWalletImage(id)));
        state.walletButtons = data;
    }
};
//# sourceMappingURL=ApiController.js.map