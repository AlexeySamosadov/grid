import type { ParsedCaipAddress } from '@reown/appkit-common';
import type { AppKitWalletButton, Wallet } from './index.js';
export * from './index.js';
interface AppKitElements {
    'appkit-wallet-button': Pick<AppKitWalletButton, 'wallet'>;
}
declare global {
    namespace JSX {
        interface IntrinsicElements extends AppKitElements {
        }
    }
}
type __BuiltinIntrinsics = JSX.IntrinsicElements;
declare module 'react' {
    namespace JSX {
        interface IntrinsicElements extends __BuiltinIntrinsics, AppKitElements {
        }
    }
}
export declare function useAppKitWallet(parameters?: {
    onSuccess?: (data: ParsedCaipAddress) => void;
    onError?: (error: Error) => void;
}): {
    data: {
        readonly chainNamespace: import("@reown/appkit-common").ChainNamespace;
        readonly chainId: import("@reown/appkit-common").ChainId;
        readonly address: string;
    } | undefined;
    error: Error | undefined;
    isReady: boolean | undefined;
    isPending: boolean;
    isError: boolean;
    isSuccess: boolean;
    connect: (wallet: Wallet) => Promise<void>;
};
export declare function useAppKitUpdateEmail(parameters?: {
    onSuccess?: (data: {
        email: string;
    }) => void;
    onError?: (error: Error) => void;
}): {
    data: {
        email: string;
    } | undefined;
    error: Error | undefined;
    isPending: boolean;
    isError: boolean;
    isSuccess: boolean;
    updateEmail: () => Promise<void>;
};
