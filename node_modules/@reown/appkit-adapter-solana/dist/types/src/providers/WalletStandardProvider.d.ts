import type { Connection, SendOptions } from '@solana/web3.js';
import { PublicKey } from '@solana/web3.js';
import type { Wallet } from '@wallet-standard/base';
import { type CaipNetwork } from '@reown/appkit-common';
import type { RequestArguments } from '@reown/appkit-controllers';
import type { Provider as CoreProvider } from '@reown/appkit-controllers';
import type { AnyTransaction, GetActiveChain, Provider as SolanaProvider } from '@reown/appkit-utils/solana';
import { ProviderEventEmitter } from './shared/ProviderEventEmitter.js';
export interface WalletStandardProviderConfig {
    wallet: Wallet;
    getActiveChain: GetActiveChain;
    requestedChains: CaipNetwork[];
}
export declare class WalletStandardProvider extends ProviderEventEmitter implements SolanaProvider {
    readonly wallet: Wallet;
    readonly getActiveChain: WalletStandardProviderConfig['getActiveChain'];
    readonly chain: "solana";
    readonly provider: CoreProvider;
    private readonly requestedChains;
    constructor({ wallet, getActiveChain, requestedChains }: WalletStandardProviderConfig);
    get id(): string;
    get name(): string;
    get type(): "ANNOUNCED";
    get explorerId(): string | undefined;
    get publicKey(): PublicKey | undefined;
    get imageUrl(): `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    get chains(): CaipNetwork[];
    connect(): Promise<string>;
    disconnect(): Promise<void>;
    signMessage(message: Uint8Array): Promise<Uint8Array<ArrayBufferLike>>;
    signTransaction<T extends AnyTransaction>(transaction: T): Promise<T>;
    signAndSendTransaction<T extends AnyTransaction>(transaction: T, sendOptions?: SendOptions): Promise<string>;
    sendTransaction(transaction: AnyTransaction, connection: Connection, options?: SendOptions): Promise<string>;
    signAllTransactions<T extends AnyTransaction[]>(transactions: T): Promise<T>;
    request<T>(_args: RequestArguments): Promise<T>;
    getAccounts(): Promise<{
        namespace: "solana";
        address: string;
        type: "eoa";
    }[]>;
    private serializeTransaction;
    private getAccount;
    private getWalletFeature;
    private getActiveChainName;
    private bindEvents;
}
