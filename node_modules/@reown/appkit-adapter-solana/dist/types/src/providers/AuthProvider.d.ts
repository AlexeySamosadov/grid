import { PublicKey, type SendOptions } from '@solana/web3.js';
import type { CaipNetwork } from '@reown/appkit-common';
import { type RequestArguments } from '@reown/appkit-controllers';
import type { AnyTransaction, Connection, GetActiveChain, Provider as SolanaProvider } from '@reown/appkit-utils/solana';
import { W3mFrameProvider } from '@reown/appkit-wallet';
import { ProviderEventEmitter } from './shared/ProviderEventEmitter.js';
export declare class AuthProvider extends ProviderEventEmitter implements SolanaProvider {
    readonly id: "ID_AUTH";
    readonly name: "Auth";
    readonly type = "AUTH";
    readonly chain: "solana";
    readonly provider: W3mFrameProvider;
    private readonly requestedChains;
    private readonly getActiveChain;
    constructor(params: AuthProvider.ConstructorParams);
    get publicKey(): PublicKey | undefined;
    get chains(): CaipNetwork[];
    connect(params?: {
        chainId?: string;
        socialUri?: string;
    }): Promise<string>;
    disconnect(): Promise<void>;
    signMessage(message: Uint8Array): Promise<Uint8Array<ArrayBufferLike>>;
    signTransaction<T extends AnyTransaction>(transaction: T): Promise<T>;
    signAndSendTransaction<T extends AnyTransaction>(transaction: T, options?: SendOptions): Promise<any>;
    sendTransaction(transaction: AnyTransaction, connection: Connection, options?: SendOptions): Promise<string>;
    signAllTransactions<T extends AnyTransaction[]>(transactions: T): Promise<T>;
    request<T>(args: RequestArguments): Promise<T>;
    getAccounts(): Promise<{
        readonly namespace: "solana";
        readonly address: string;
        readonly type: "eoa";
    }[]>;
    private serializeTransaction;
}
export declare namespace AuthProvider {
    type ConstructorParams = {
        w3mFrameProvider: W3mFrameProvider;
        getActiveChain: GetActiveChain;
        chains: CaipNetwork[];
    };
    type Session = Awaited<ReturnType<W3mFrameProvider['connect']>>;
}
