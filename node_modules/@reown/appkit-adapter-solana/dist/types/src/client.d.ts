import type { BaseWalletAdapter } from '@solana/wallet-adapter-base';
import type { Commitment, ConnectionConfig } from '@solana/web3.js';
import UniversalProvider from '@walletconnect/universal-provider';
import { type AppKit, type AppKitOptions } from '@reown/appkit';
import type { Provider as SolanaProvider } from '@reown/appkit-utils/solana';
import { W3mFrameProvider } from '@reown/appkit-wallet';
import { AdapterBlueprint } from '@reown/appkit/adapters';
export interface AdapterOptions {
    connectionSettings?: Commitment | ConnectionConfig;
    wallets?: BaseWalletAdapter[];
    registerWalletStandard?: boolean;
}
export declare class SolanaAdapter extends AdapterBlueprint<SolanaProvider> {
    private connectionSettings;
    wallets?: BaseWalletAdapter[];
    private registerWalletStandard?;
    private balancePromises;
    private universalProvider;
    constructor(options?: AdapterOptions);
    construct(params: AdapterBlueprint.Params): void;
    setAuthProvider(w3mFrameProvider: W3mFrameProvider): void;
    syncConnectors(options: AppKitOptions, appKit: AppKit): void;
    writeContract(): Promise<AdapterBlueprint.WriteContractResult>;
    getCapabilities(): Promise<unknown>;
    grantPermissions(): Promise<unknown>;
    revokePermissions(): Promise<`0x${string}`>;
    walletGetAssets(_params: AdapterBlueprint.WalletGetAssetsParams): Promise<AdapterBlueprint.WalletGetAssetsResponse>;
    getAccounts(params: AdapterBlueprint.GetAccountsParams): Promise<AdapterBlueprint.GetAccountsResult>;
    signMessage(params: AdapterBlueprint.SignMessageParams): Promise<AdapterBlueprint.SignMessageResult>;
    estimateGas(params: AdapterBlueprint.EstimateGasTransactionArgs): Promise<AdapterBlueprint.EstimateGasTransactionResult>;
    sendTransaction(params: AdapterBlueprint.SendTransactionParams): Promise<AdapterBlueprint.SendTransactionResult>;
    parseUnits(): bigint;
    formatUnits(): string;
    connect(params: AdapterBlueprint.ConnectParams): Promise<AdapterBlueprint.ConnectResult>;
    getBalance(params: AdapterBlueprint.GetBalanceParams): Promise<AdapterBlueprint.GetBalanceResult>;
    switchNetwork(params: AdapterBlueprint.SwitchNetworkParams): Promise<void>;
    protected listenProviderEvents(): undefined;
    listenSolanaProviderEvents(connectorId: string, provider: SolanaProvider): void;
    setUniversalProvider(universalProvider: UniversalProvider): Promise<void>;
    connectWalletConnect(chainId?: string | number): Promise<{
        clientId: string;
    } | undefined>;
    disconnect(params: AdapterBlueprint.DisconnectParams): Promise<{
        connections: import("@reown/appkit-common").Connection[];
    }>;
    syncConnection(params: AdapterBlueprint.SyncConnectionParams): Promise<AdapterBlueprint.ConnectResult>;
    syncConnections({ connectToFirstConnector, caipNetwork, getConnectorStorageInfo }: AdapterBlueprint.SyncConnectionsParams): Promise<void>;
    getWalletConnectProvider(params: AdapterBlueprint.GetWalletConnectProviderParams): AdapterBlueprint.GetWalletConnectProviderResult;
    private disconnectAll;
}
